diff -rupN /Users/smirnov/Downloads/cctools-836-2/libstuff/Makefile /Users/smirnov/Downloads/cctools-836/libstuff/Makefile
--- /Users/smirnov/Downloads/cctools-836-2/libstuff/Makefile	1970-01-01 03:00:00.000000000 +0300
+++ /Users/smirnov/Downloads/cctools-836/libstuff/Makefile	2013-02-23 18:47:51.000000000 +0400
@@ -1,6 +1,6 @@
 RC_OS = macos
 OFLAG = -Os
-LTO = -DLTO_SUPPORT
+LTO = 
 LEGACY = -D_MACH_I386_THREAD_STATUS_FPSTATE_LEGACY_FIELD_NAMES_ \
 	 -D_ARCHITECTURE_I386_FPU_FPSTATE_LEGACY_FIELD_NAMES_
 
@@ -74,7 +74,7 @@ CFILES = allocate.c errors.c arch.c exec
 	  breakout.c writeout.c checkout.c fatal_arch.c ofile_get_word.c \
 	  vm_flush_cache.c hash_string.c dylib_roots.c guess_short_name.c \
 	  SymLoc.c get_arch_from_host.c crc32.c macosx_deployment_target.c \
-	  symbol_list.c unix_standard_mode.c lto.c llvm.c $(COFF_BYTESEX)
+	  symbol_list.c unix_standard_mode.c llvm.c $(COFF_BYTESEX)
 OBJS = $(CFILES:.c=.o) apple_version.o
 INSTALL_FILES = $(CFILES) Makefile notes
 
Binary files /Users/smirnov/Downloads/cctools-836-2/otool/.main.c.swp and /Users/smirnov/Downloads/cctools-836/otool/.main.c.swp differ
diff -rupN /Users/smirnov/Downloads/cctools-836-2/otool/main.c /Users/smirnov/Downloads/cctools-836/otool/main.c
--- /Users/smirnov/Downloads/cctools-836-2/otool/main.c	1970-01-01 03:00:00.000000000 +0300
+++ /Users/smirnov/Downloads/cctools-836/otool/main.c	2013-02-23 20:58:35.000000000 +0400
@@ -68,6 +68,7 @@ enum bool Dflag = FALSE; /* print the sh
 enum bool tflag = FALSE; /* print the text */
 enum bool dflag = FALSE; /* print the data */
 enum bool oflag = FALSE; /* print the objctive-C info */
+enum bool zflag = FALSE;  /* objctive-C info will be printed in most succinct way*/
 enum bool Oflag = FALSE; /* print the objctive-C selector strings only */
 enum bool rflag = FALSE; /* print the relocation entries */
 enum bool Tflag = FALSE; /* print the dylib table of contents */
@@ -465,6 +466,9 @@ char **envp)
 		case 'j':
 		    jflag = TRUE;
 		    break;
+        case 'z':
+            zflag = TRUE;
+            break;
 		default:
 		    error("unknown char `%c' in flag %s\n", argv[i][j],argv[i]);
 		    usage();
@@ -542,6 +546,7 @@ void)
 		"section\n");
 	fprintf(stderr, "\t-d print the data section\n");
 	fprintf(stderr, "\t-o print the Objective-C segment\n");
+    fprintf(stderr, "\t-z used with '-o'. print only '[succinct_mode] class_name method_name type impl'\n");
 	fprintf(stderr, "\t-r print the relocation entries\n");
 	fprintf(stderr, "\t-S print the table of contents of a library\n");
 	fprintf(stderr, "\t-T print the table of contents of a dynamic "
@@ -693,15 +698,15 @@ void *cookie) /* cookie is not used */
 	 * name is passed in.
 	 */
 	if(Xflag == FALSE){
-	    printf("%s", ofile->file_name);
-	    if(ofile->member_ar_hdr != NULL){
-		printf("(%.*s)", (int)ofile->member_name_size,
-			ofile->member_name);
-	    }
-	    if(arch_name != NULL)
-		printf(" (architecture %s):", arch_name);
-	    else
-		printf(":");
+        printf("%s", ofile->file_name);
+        if(ofile->member_ar_hdr != NULL){
+        printf("(%.*s)", (int)ofile->member_name_size,
+            ofile->member_name);
+        }
+        if(arch_name != NULL)
+        printf(" (architecture %s):", arch_name);
+        else
+        printf(":");
 	    /*
 	     * If the mach_header pointer is NULL the file is not an object
 	     * file.  Truncated object file (where the file size is less
@@ -1443,7 +1448,7 @@ void *cookie) /* cookie is not used */
 			    ofile->object_addr, ofile->object_size, symbols,
 			    nsymbols, strings, strings_size, sorted_symbols,
 			    nsorted_symbols, ext_relocs, next_relocs,
-			    loc_relocs, nloc_relocs, vflag);
+			    loc_relocs, nloc_relocs, vflag, zflag);
 	    }
 	    else{
 		 /*
@@ -1491,7 +1496,7 @@ void *cookie) /* cookie is not used */
 			    ofile->object_addr, ofile->object_size, symbols,
 			    nsymbols, strings, strings_size, sorted_symbols,
 			    nsorted_symbols, ext_relocs, next_relocs,
-			    loc_relocs, nloc_relocs, vflag);
+			    loc_relocs, nloc_relocs, vflag, zflag);
 		}
 	    }
 	}
diff -rupN /Users/smirnov/Downloads/cctools-836-2/otool/ofile_print.h /Users/smirnov/Downloads/cctools-836/otool/ofile_print.h
--- /Users/smirnov/Downloads/cctools-836-2/otool/ofile_print.h	1970-01-01 03:00:00.000000000 +0300
+++ /Users/smirnov/Downloads/cctools-836/otool/ofile_print.h	2013-02-23 19:46:10.000000000 +0400
@@ -491,7 +491,8 @@ extern void print_objc2_32bit(
     uint32_t next_relocs,
     struct relocation_info *loc_relocs,
     uint32_t nloc_relocs,
-    enum bool verbose);
+    enum bool verbose,
+    enum bool succinct);
 
 extern void print_objc_protocol_section(
     struct load_command *load_commands,
diff -rupN /Users/smirnov/Downloads/cctools-836-2/otool/print_objc2_32bit.c /Users/smirnov/Downloads/cctools-836/otool/print_objc2_32bit.c
--- /Users/smirnov/Downloads/cctools-836-2/otool/print_objc2_32bit.c	1970-01-01 03:00:00.000000000 +0300
+++ /Users/smirnov/Downloads/cctools-836/otool/print_objc2_32bit.c	2013-02-23 20:55:20.000000000 +0400
@@ -31,6 +31,7 @@
 #include "stdio.h"
 #include "stddef.h"
 #include "string.h"
+#include "stdarg.h"
 #include "mach-o/loader.h"
 #include "stuff/allocate.h"
 #include "stuff/bytesex.h"
@@ -38,6 +39,20 @@
 #include "stuff/reloc.h"
 #include "ofile_print.h"
 
+// hackish, but... so easy
+enum bool global_succinct = FALSE;
+const char* current_class_name = NULL;
+#define conditional_printf(ARGS...) {if(global_succinct) printf(ARGS);}
+void usual_printf(const char* format, ...) {
+    if(global_succinct)
+        return;
+    va_list args;
+    va_start(args, format);
+    vprintf(format,args);
+    va_end(args);
+}
+
+
 extern char *oname;
 
 /*
@@ -445,8 +460,10 @@ struct relocation_info *ext_relocs,
 uint32_t next_relocs,
 struct relocation_info *loc_relocs,
 uint32_t nloc_relocs,
-enum bool verbose)
+enum bool verbose,
+enum bool succinct)
 {
+    global_succinct = succinct;
     struct section_info_32 *s;
     struct info info;
 
@@ -533,7 +550,7 @@ void (*func)(uint32_t, struct info *))
 	if(s == NULL)
 	    return;
 
-	printf("Contents of (%.16s,%.16s) section\n", s->segname, s->sectname);
+	usual_printf("Contents of (%.16s,%.16s) section\n", s->segname, s->sectname);
 	for(i = 0; i < s->size; i += sizeof(uint32_t)){
 
 	    memset(&p, '\0', sizeof(uint32_t));
@@ -543,20 +560,20 @@ void (*func)(uint32_t, struct info *))
 	    memcpy(&p, s->contents + i, size);
 
 	    if(i + sizeof(uint32_t) > s->size)
-		printf("%s list pointer extends past end of (%.16s,%.16s) "
+		usual_printf("%s list pointer extends past end of (%.16s,%.16s) "
 		       "section\n", listname, s->segname, s->sectname);
-	    printf("%08x ", s->addr + i);
+	    usual_printf("%08x ", s->addr + i);
 
 	    if(info->swapped)
 		p = SWAP_INT(p);
-	    printf("0x%x", p);
+	    usual_printf("0x%x", p);
 
 	    name = get_symbol_32(i, s->addr - info->database, p,
 			         s->relocs, s->nrelocs, info);
 	    if(name != NULL)
-		printf(" %s\n", name);
+		usual_printf(" %s\n", name);
 	    else
-		printf("\n");
+		usual_printf("\n");
 	    if(func != NULL)
 		func(p, info);
 	}
@@ -583,50 +600,50 @@ struct info *info)
 	memset(&c, '\0', sizeof(struct class_t));
 	if(left < sizeof(struct class_t)){
 	    memcpy(&c, r, left);
-	    printf("   (class_t entends past the end of the section)\n");
+	    usual_printf("   (class_t entends past the end of the section)\n");
 	}
 	else
 	    memcpy(&c, r, sizeof(struct class_t));
 	if(info->swapped)
 	    swap_class_t(&c, info->host_byte_sex);
-	printf("           isa 0x%x", c.isa);
+	usual_printf("           isa 0x%x", c.isa);
 	name = get_symbol_32(offset + offsetof(struct class_t, isa),
 			     s->addr - info->database, c.isa, s->relocs,
 			     s->nrelocs, info);
 	if(name != NULL)
-	    printf(" %s\n", name);
+	    usual_printf(" %s\n", name);
 	else
-	    printf("\n");
-	printf("    superclass 0x%x", c.superclass);
+	    usual_printf("\n");
+	usual_printf("    superclass 0x%x", c.superclass);
 	name = get_symbol_32(offset + offsetof(struct class_t, superclass),
 			     s->addr - info->database, c.superclass, s->relocs,
 			     s->nrelocs, info);
 	if(name != NULL)
-	    printf(" %s\n", name);
+	    usual_printf(" %s\n", name);
 	else
-	    printf("\n");
-	printf("         cache 0x%x", c.cache);
+	    usual_printf("\n");
+	usual_printf("         cache 0x%x", c.cache);
 	name = get_symbol_32(offset + offsetof(struct class_t, cache),
 			     s->addr - info->database, c.cache, s->relocs,
 			     s->nrelocs, info);
 	if(name != NULL)
-	    printf(" %s\n", name);
+	    usual_printf(" %s\n", name);
 	else
-	    printf("\n");
-	printf("        vtable 0x%x", c.vtable);
+	    usual_printf("\n");
+	usual_printf("        vtable 0x%x", c.vtable);
 	name = get_symbol_32(offset + offsetof(struct class_t, vtable),
 			     s->addr - info->database, c.vtable, s->relocs,
 			     s->nrelocs, info);
 	if(name != NULL)
-	    printf(" %s\n", name);
+	    usual_printf(" %s\n", name);
 	else
-	    printf("\n");
-	printf("          data 0x%x (struct class_ro_t *)\n", c.data);
+	    usual_printf("\n");
+	usual_printf("          data 0x%x (struct class_ro_t *)\n", c.data);
 	print_class_ro_t(c.data, info, &is_meta_class);
 
 	if(! is_meta_class)
 	    {
-		printf("Meta Class\n");
+		usual_printf("Meta Class\n");
 		print_class_t(c.isa, info);
 	    }
 }
@@ -651,44 +668,45 @@ enum bool *is_meta_class)
 	memset(&cro, '\0', sizeof(struct class_ro_t));
 	if(left < sizeof(struct class_ro_t)){
 	    memcpy(&cro, r, left);
-	    printf("   (class_ro_t entends past the end of the section)\n");
+	    usual_printf("   (class_ro_t entends past the end of the section)\n");
 	}
 	else
 	    memcpy(&cro, r, sizeof(struct class_ro_t));
 	if(info->swapped)
 	    swap_class_ro_t(&cro, info->host_byte_sex);
-	printf("                    flags 0x%x", cro.flags);
+	usual_printf("                    flags 0x%x", cro.flags);
 	if(cro.flags & RO_META)
-	    printf(" RO_META");
+	    usual_printf(" RO_META");
 	if(cro.flags & RO_ROOT)
-	    printf(" RO_ROOT");
+	    usual_printf(" RO_ROOT");
 	if(cro.flags & RO_HAS_CXX_STRUCTORS)
-	    printf(" RO_HAS_CXX_STRUCTORS");
-	printf("\n");
-	printf("            instanceStart %u\n", cro.instanceStart);
-	printf("             instanceSize %u\n", cro.instanceSize);
-	printf("               ivarLayout 0x%x\n", cro.ivarLayout);
+	    usual_printf(" RO_HAS_CXX_STRUCTORS");
+	usual_printf("\n");
+	usual_printf("            instanceStart %u\n", cro.instanceStart);
+	usual_printf("             instanceSize %u\n", cro.instanceSize);
+	usual_printf("               ivarLayout 0x%x\n", cro.ivarLayout);
 	print_layout_map(cro.ivarLayout, info);
-	printf("                     name 0x%x", cro.name);
+	usual_printf("                     name 0x%x", cro.name);
 	name = get_pointer_32(cro.name, NULL, &left, NULL, info->sections,
 			      info->nsections);
 	if(name != NULL)
-	    printf(" %.*s\n", (int)left, name);
+	    usual_printf(" %.*s\n", (int)left, name);
 	else
-	    printf("\n");
-	printf("              baseMethods 0x%x (struct method_list_t *)\n",
+	    usual_printf("\n");
+    current_class_name = name;
+	usual_printf("              baseMethods 0x%x (struct method_list_t *)\n",
 	       cro.baseMethods);
 	if(cro.baseMethods != 0)
 	    print_method_list_t(cro.baseMethods, info, "");
-	printf("            baseProtocols 0x%x\n", cro.baseProtocols);
+	usual_printf("            baseProtocols 0x%x\n", cro.baseProtocols);
 	if(cro.baseProtocols != 0)
 	    print_protocol_list_t(cro.baseProtocols, info);
-	printf("                    ivars 0x%x\n", cro.ivars);
+	usual_printf("                    ivars 0x%x\n", cro.ivars);
 	if(cro.ivars != 0)
 	    print_ivar_list_t(cro.ivars, info);
-	printf("           weakIvarLayout 0x%x\n", cro.weakIvarLayout);
+	usual_printf("           weakIvarLayout 0x%x\n", cro.weakIvarLayout);
 	print_layout_map(cro.weakIvarLayout, info);
-	printf("           baseProperties 0x%x\n", cro.baseProperties);
+	usual_printf("           baseProperties 0x%x\n", cro.baseProperties);
 	if(cro.baseProperties != 0)
 	    print_objc_property_list(cro.baseProperties, info);
 	if (is_meta_class)
@@ -710,13 +728,13 @@ struct info *info)
 	layout_map = get_pointer_32(p, &offset, &left, &s, 
 				    info->sections, info->nsections);
 	if(layout_map != NULL){
-	    printf("                layout map: ");
+	    usual_printf("                layout map: ");
 	    do{
-		printf("0x%02x ", (*layout_map) & 0xff);
+		usual_printf("0x%02x ", (*layout_map) & 0xff);
 		left--;
 		layout_map++;
 	    }while(*layout_map != '\0' && left != 0);
-	    printf("\n");
+	    usual_printf("\n");
 	}
 }
 
@@ -741,15 +759,15 @@ char *indent)
 	memset(&ml, '\0', sizeof(struct method_list_t));
 	if(left < sizeof(struct method_list_t)){
 	    memcpy(&ml, r, left);
-	    printf("%s   (method_list_t entends past the end of the "
+	    usual_printf("%s   (method_list_t entends past the end of the "
 		   "section)\n", indent);
 	}
 	else
 	    memcpy(&ml, r, sizeof(struct method_list_t));
 	if(info->swapped)
 	    swap_method_list_t(&ml, info->host_byte_sex);
-	printf("%s\t\t   entsize %u\n", indent, ml.entsize);
-	printf("%s\t\t     count %u\n", indent, ml.count);
+	usual_printf("%s\t\t   entsize %u\n", indent, ml.entsize);
+	usual_printf("%s\t\t     count %u\n", indent, ml.count);
 
 	p += sizeof(struct method_list_t);
 	offset += sizeof(struct method_list_t);
@@ -761,7 +779,7 @@ char *indent)
 	    memset(&m, '\0', sizeof(struct method_t));
 	    if(left < sizeof(struct method_t)){
 		memcpy(&ml, r, left);
-		printf("%s   (method_t entends past the end of the "
+		usual_printf("%s   (method_t entends past the end of the "
 		       "section)\n", indent);
 	    }
 	    else
@@ -769,28 +787,30 @@ char *indent)
 	    if(info->swapped)
 		swap_method_t(&m, info->host_byte_sex);
 
-	    printf("%s\t\t      name 0x%x", indent, m.name);
+	    usual_printf("%s\t\t      name 0x%x", indent, m.name);
 	    name = get_pointer_32(m.name, NULL, &left, NULL, info->sections,
 				  info->nsections);
 	    if(name != NULL)
-		printf(" %.*s\n", (int)left, name);
+		usual_printf(" %.*s\n", (int)left, name);
 	    else
-		printf("\n");
-	    printf("%s\t\t     types 0x%x", indent, m.types);
+		usual_printf("\n");
+        conditional_printf("[succinct_mode]\t%s\t%s\t",current_class_name?:"<no_name>",name?:"<no_name>");
+	    usual_printf("%s\t\t     types 0x%x", indent, m.types);
 	    name = get_pointer_32(m.types, NULL, &left, NULL, info->sections,
 				  info->nsections);
 	    if(name != NULL)
-		printf(" %.*s\n", (int)left, name);
+		usual_printf(" %.*s\n", (int)left, name);
 	    else
-		printf("\n");
-	    printf("%s\t\t       imp 0x%x", indent, m.imp);
+		usual_printf("\n");
+        conditional_printf("%s\t0x%x\n",name,m.imp);
+	    usual_printf("%s\t\t       imp 0x%x", indent, m.imp);
 	    name = get_symbol_32(offset + offsetof(struct method_t, imp),
 				 s->addr - info->database, m.imp, s->relocs,
 				 s->nrelocs, info);
 	    if(name != NULL)
-		printf(" %s\n", name);
+		usual_printf(" %s\n", name);
 	    else
-		printf("\n");
+		usual_printf("\n");
 
 	    p += sizeof(struct method_t);
 	    offset += sizeof(struct method_t);
@@ -818,14 +838,14 @@ struct info *info)
 	memset(&il, '\0', sizeof(struct ivar_list_t));
 	if(left < sizeof(struct ivar_list_t)){
 	    memcpy(&il, r, left);
-	    printf("   (ivar_list_t entends past the end of the section)\n");
+	    usual_printf("   (ivar_list_t entends past the end of the section)\n");
 	}
 	else
 	    memcpy(&il, r, sizeof(struct ivar_list_t));
 	if(info->swapped)
 	    swap_ivar_list_t(&il, info->host_byte_sex);
-	printf("                    entsize %u\n", il.entsize);
-	printf("                      count %u\n", il.count);
+	usual_printf("                    entsize %u\n", il.entsize);
+	usual_printf("                      count %u\n", il.count);
 
 	p += sizeof(struct ivar_list_t);
 	offset += sizeof(struct ivar_list_t);
@@ -837,41 +857,41 @@ struct info *info)
 	    memset(&i, '\0', sizeof(struct ivar_t));
 	    if(left < sizeof(struct ivar_t)){
 		memcpy(&i, r, left);
-		printf("   (ivar_t entends past the end of the section)\n");
+		usual_printf("   (ivar_t entends past the end of the section)\n");
 	    }
 	    else
 		memcpy(&i, r, sizeof(struct ivar_t));
 	    if(info->swapped)
 		swap_ivar_t(&i, info->host_byte_sex);
 
-	    printf("\t\t\t   offset 0x%x", i.offset);
+	    usual_printf("\t\t\t   offset 0x%x", i.offset);
 	    ivar_offset_p = get_pointer_32(i.offset, NULL, &left, NULL, 
 					   info->sections, info->nsections);
 	    if(ivar_offset_p != NULL && left >= sizeof(*ivar_offset_p)){
 		memcpy(&ivar_offset, ivar_offset_p, sizeof(ivar_offset));
 		if(info->swapped) 
 		    ivar_offset = SWAP_INT(ivar_offset);
-		printf(" %u\n", ivar_offset);
+		usual_printf(" %u\n", ivar_offset);
             }
 	    else
-		printf("\n");
+		usual_printf("\n");
 
-	    printf("\t\t\t     name 0x%x", i.name);
+	    usual_printf("\t\t\t     name 0x%x", i.name);
 	    name = get_pointer_32(i.name, NULL, &left, NULL, info->sections,
 				  info->nsections);
 	    if(name != NULL)
-		printf(" %.*s\n", (int)left, name);
+		usual_printf(" %.*s\n", (int)left, name);
 	    else
-		printf("\n");
-	    printf("\t\t\t     type 0x%x", i.type);
+		usual_printf("\n");
+	    usual_printf("\t\t\t     type 0x%x", i.type);
 	    name = get_pointer_32(i.type, NULL, &left, NULL, info->sections,
 				  info->nsections);
 	    if(name != NULL)
-		printf(" %.*s\n", (int)left, name);
+		usual_printf(" %.*s\n", (int)left, name);
 	    else
-		printf("\n");
-	    printf("\t\t\talignment %u\n", i.alignment);
-	    printf("\t\t\t     size %u\n", i.size);
+		usual_printf("\n");
+	    usual_printf("\t\t\talignment %u\n", i.alignment);
+	    usual_printf("\t\t\t     size %u\n", i.size);
 
 	    p += sizeof(struct ivar_t);
 	    offset += sizeof(struct ivar_t);
@@ -899,14 +919,14 @@ struct info *info)
 	memset(&pl, '\0', sizeof(struct protocol_list_t));
 	if(left < sizeof(struct protocol_list_t)){
 	    memcpy(&pl, r, left);
-	    printf("   (protocol_list_t entends past the end of the "
+	    usual_printf("   (protocol_list_t entends past the end of the "
 		   "section)\n");
 	}
 	else
 	    memcpy(&pl, r, sizeof(struct protocol_list_t));
 	if(info->swapped)
 	    swap_protocol_list_t(&pl, info->host_byte_sex);
-	printf("                      count %u\n", pl.count);
+	usual_printf("                      count %u\n", pl.count);
 
 	p += sizeof(struct protocol_list_t);
 	offset += sizeof(struct protocol_list_t);
@@ -918,14 +938,14 @@ struct info *info)
 	    q = 0;
 	    if(left < sizeof(uint32_t)){
 		memcpy(&q, r, left);
-		printf("   (protocol_t * entends past the end of the "
+		usual_printf("   (protocol_t * entends past the end of the "
 		       "section)\n");
 	    }
 	    else
 		memcpy(&q, r, sizeof(uint32_t));
 	    if(info->swapped)
 		q = SWAP_INT(q);
-	    printf("\t\t      list[%u] 0x%x (struct protocol_t *)\n", i, q);
+	    usual_printf("\t\t      list[%u] 0x%x (struct protocol_t *)\n", i, q);
 
 	    r = get_pointer_32(q, &offset, &left, &s, info->sections,
 			       info->nsections);
@@ -934,35 +954,35 @@ struct info *info)
 	    memset(&pc, '\0', sizeof(struct protocol_t));
 	    if(left < sizeof(struct protocol_t)){
 		memcpy(&pc, r, left);
-		printf("   (protocol_t entends past the end of the section)\n");
+		usual_printf("   (protocol_t entends past the end of the section)\n");
 	    }
 	    else
 		memcpy(&pc, r, sizeof(struct protocol_t));
 	    if(info->swapped)
 		swap_protocol_t(&pc, info->host_byte_sex);
 
-	    printf("\t\t\t      isa 0x%x\n", pc.isa);
-	    printf("\t\t\t     name 0x%x", pc.name);
+	    usual_printf("\t\t\t      isa 0x%x\n", pc.isa);
+	    usual_printf("\t\t\t     name 0x%x", pc.name);
 	    name = get_pointer_32(pc.name, NULL, &left, NULL, info->sections,
 				  info->nsections);
 	    if(name != NULL)
-		printf(" %.*s\n", (int)left, name);
+		usual_printf(" %.*s\n", (int)left, name);
 	    else
-		printf("\n");
-	    printf("\t\t\tprotocols 0x%x\n", pc.protocols);
-	    printf("\t\t  instanceMethods 0x%x (struct method_list_t *)\n",
+		usual_printf("\n");
+	    usual_printf("\t\t\tprotocols 0x%x\n", pc.protocols);
+	    usual_printf("\t\t  instanceMethods 0x%x (struct method_list_t *)\n",
 		   pc.instanceMethods);
 	    if(pc.instanceMethods != 0)
 		print_method_list_t(pc.instanceMethods, info, "\t");
-	    printf("\t\t     classMethods 0x%x (struct method_list_t *)\n",
+	    usual_printf("\t\t     classMethods 0x%x (struct method_list_t *)\n",
 		   pc.classMethods);
 	    if(pc.classMethods != 0)
 		print_method_list_t(pc.classMethods, info, "\t");
-	    printf("\t  optionalInstanceMethods 0x%x\n",
+	    usual_printf("\t  optionalInstanceMethods 0x%x\n",
 		   pc.optionalInstanceMethods);
-	    printf("\t     optionalClassMethods 0x%x\n",
+	    usual_printf("\t     optionalClassMethods 0x%x\n",
 		   pc.optionalClassMethods);
-	    printf("\t       instanceProperties 0x%x\n",
+	    usual_printf("\t       instanceProperties 0x%x\n",
 		   pc.instanceProperties);
 
 	    p += sizeof(uint32_t);
@@ -990,15 +1010,15 @@ struct info *info)
 	memset(&opl, '\0', sizeof(struct objc_property_list));
 	if(left < sizeof(struct objc_property_list)){
 	    memcpy(&opl, r, left);
-	    printf("   (objc_property_list entends past the end of the "
+	    usual_printf("   (objc_property_list entends past the end of the "
 		   "section)\n");
 	}
 	else
 	    memcpy(&opl, r, sizeof(struct objc_property_list));
 	if(info->swapped)
 	    swap_objc_property_list(&opl, info->host_byte_sex);
-	printf("                    entsize %u\n", opl.entsize);
-	printf("                      count %u\n", opl.count);
+	usual_printf("                    entsize %u\n", opl.entsize);
+	usual_printf("                      count %u\n", opl.count);
 
 	p += sizeof(struct objc_property_list);
 	offset += sizeof(struct objc_property_list);
@@ -1010,7 +1030,7 @@ struct info *info)
 	    memset(&op, '\0', sizeof(struct objc_property));
 	    if(left < sizeof(struct objc_property)){
 		memcpy(&op, r, left);
-		printf("   (objc_property entends past the end of the "
+		usual_printf("   (objc_property entends past the end of the "
 		       "section)\n");
 	    }
 	    else
@@ -1018,20 +1038,20 @@ struct info *info)
 	    if(info->swapped)
 		swap_objc_property(&op, info->host_byte_sex);
 
-	    printf("\t\t\t     name 0x%x", op.name);
+	    usual_printf("\t\t\t     name 0x%x", op.name);
 	    name = get_pointer_32(op.name, NULL, &left, NULL, info->sections,
 				  info->nsections);
 	    if(name != NULL)
-		printf(" %.*s\n", (int)left, name);
+		usual_printf(" %.*s\n", (int)left, name);
 	    else
-		printf("\n");
-	    printf("\t\t\tattributes x%x", op.attributes);
+		usual_printf("\n");
+	    usual_printf("\t\t\tattributes x%x", op.attributes);
 	    name = get_pointer_32(op.attributes, NULL, &left, NULL,
 				  info->sections, info->nsections);
 	    if(name != NULL)
-		printf(" %.*s\n", (int)left, name);
+		usual_printf(" %.*s\n", (int)left, name);
 	    else
-		printf("\n");
+		usual_printf("\n");
 
 	    p += sizeof(struct objc_property);
 	    offset += sizeof(struct objc_property);
@@ -1057,33 +1077,33 @@ struct info *info)
 	memset(&c, '\0', sizeof(struct category_t));
 	if(left < sizeof(struct category_t)){
 	    memcpy(&c, r, left);
-	    printf("   (category_t entends past the end of the section)\n");
+	    usual_printf("   (category_t entends past the end of the section)\n");
 	}
 	else
 	    memcpy(&c, r, sizeof(struct category_t));
 	if(info->swapped)
 	    swap_category_t(&c, info->host_byte_sex);
-	printf("              name 0x%x", c.name);
+	usual_printf("              name 0x%x", c.name);
 	name = get_symbol_32(offset + offsetof(struct category_t, name),
 			     s->addr - info->database, c.name, s->relocs,
 			     s->nrelocs, info);
 	if(name != NULL)
-	    printf(" %s\n", name);
+	    usual_printf(" %s\n", name);
 	else
-	    printf("\n");
-	printf("               cls 0x%x\n", c.cls);
+	    usual_printf("\n");
+	usual_printf("               cls 0x%x\n", c.cls);
 	if(c.cls != 0)
 	    print_class_t(c.cls, info);
-	printf("   instanceMethods 0x%x\n", c.instanceMethods);
+	usual_printf("   instanceMethods 0x%x\n", c.instanceMethods);
 	if(c.instanceMethods != 0)
 	    print_method_list_t(c.instanceMethods, info, "");
-	printf("      classMethods 0x%x\n", c.classMethods);
+	usual_printf("      classMethods 0x%x\n", c.classMethods);
 	if(c.classMethods != 0)
 	    print_method_list_t(c.classMethods, info, "");
-	printf("         protocols 0x%x\n", c.protocols);
+	usual_printf("         protocols 0x%x\n", c.protocols);
 	if(c.protocols != 0)
 	    print_protocol_list_t(c.protocols, info);
-	printf("instanceProperties 0x%x\n", c.instanceProperties);
+	usual_printf("instanceProperties 0x%x\n", c.instanceProperties);
 	if(c.instanceProperties)
 	    print_objc_property_list(c.instanceProperties, info);
 }
@@ -1103,7 +1123,7 @@ struct info *info)
 	if(s == NULL)
 	    return;
 
-	printf("Contents of (%.16s,%.16s) section\n", s->segname, s->sectname);
+	usual_printf("Contents of (%.16s,%.16s) section\n", s->segname, s->sectname);
 	offset = 0;
 	for(i = 0; i < s->size; i += sizeof(struct message_ref)){
 	    p = s->addr + i;
@@ -1114,27 +1134,27 @@ struct info *info)
 	    memset(&mr, '\0', sizeof(struct message_ref));
 	    if(left < sizeof(struct message_ref)){
 		memcpy(&mr, r, left);
-		printf(" (message_ref entends past the end of the section)\n");
+		usual_printf(" (message_ref entends past the end of the section)\n");
 	    }
 	    else
 		memcpy(&mr, r, sizeof(struct message_ref));
 	    if(info->swapped)
 		swap_message_ref(&mr, info->host_byte_sex);
-	    printf("  imp 0x%x", mr.imp);
+	    usual_printf("  imp 0x%x", mr.imp);
 	    name = get_symbol_32(offset + offsetof(struct message_ref, imp),
 				 s->addr - info->database, mr.imp, s->relocs,
 				 s->nrelocs, info);
 	    if(name != NULL)
-		printf(" %s\n", name);
+		usual_printf(" %s\n", name);
 	    else
-		printf("\n");
-	    printf("  sel 0x%x", mr.sel);
+		usual_printf("\n");
+	    usual_printf("  sel 0x%x", mr.sel);
 	    name = get_pointer_32(mr.sel, NULL, &left, NULL, info->sections,
 				  info->nsections);
 	    if(name != NULL)
-		printf(" %.*s\n", (int)left, name);
+		usual_printf(" %.*s\n", (int)left, name);
 	    else
-		printf("\n");
+		usual_printf("\n");
 	    offset += sizeof(struct message_ref);
 	}
 }
@@ -1153,7 +1173,7 @@ struct info *info)
 	if(s == NULL)
 	    return;
 
-	printf("Contents of (%.16s,%.16s) section\n", s->segname, s->sectname);
+	usual_printf("Contents of (%.16s,%.16s) section\n", s->segname, s->sectname);
 	p = s->addr;
 	r = get_pointer_32(p, &offset, &left, &s,
 			   info->sections, info->nsections);
@@ -1162,19 +1182,19 @@ struct info *info)
 	memset(&o, '\0', sizeof(struct objc_image_info));
 	if(left < sizeof(struct objc_image_info)){
 	    memcpy(&o, r, left);
-	    printf(" (objc_image_info entends past the end of the section)\n");
+	    usual_printf(" (objc_image_info entends past the end of the section)\n");
 	}
 	else
 	    memcpy(&o, r, sizeof(struct objc_image_info));
 	if(info->swapped)
 	    swap_objc_image_info(&o, info->host_byte_sex);
-	printf("  version %u\n", o.version);
-	printf("    flags 0x%x", o.flags);
+	usual_printf("  version %u\n", o.version);
+	usual_printf("    flags 0x%x", o.flags);
 	if(o.flags & OBJC_IMAGE_IS_REPLACEMENT)
-	    printf(" OBJC_IMAGE_IS_REPLACEMENT");
+	    usual_printf(" OBJC_IMAGE_IS_REPLACEMENT");
 	if(o.flags & OBJC_IMAGE_SUPPORTS_GC)
-	    printf(" OBJC_IMAGE_SUPPORTS_GC");
-	printf("\n");
+	    usual_printf(" OBJC_IMAGE_SUPPORTS_GC");
+	usual_printf("\n");
 }
 
 static
@@ -1218,11 +1238,11 @@ uint32_t *database) 
 	    if(swapped)
 		swap_load_command(&lcmd, host_byte_sex);
 	    if(lcmd.cmdsize % sizeof(int32_t) != 0)
-		printf("load command %u size not a multiple of "
+		usual_printf("load command %u size not a multiple of "
 		       "sizeof(int32_t)\n", i);
 	    if((char *)lc + lcmd.cmdsize >
 	       (char *)load_commands + sizeofcmds)
-		printf("load command %u extends past end of load "
+		usual_printf("load command %u extends past end of load "
 		       "commands\n", i);
 	    left = sizeofcmds - ((char *)lc - (char *)load_commands);
 
@@ -1246,7 +1266,7 @@ uint32_t *database) 
 		for(j = 0 ; j < sg.nsects ; j++){
 		    if(p + sizeof(struct section) >
 		       (char *)load_commands + sizeofcmds){
-			printf("section structure command extends past "
+			usual_printf("section structure command extends past "
 			       "end of load commands\n");
 		    }
 		    left = sizeofcmds - (p - (char *)load_commands);
@@ -1269,12 +1289,12 @@ uint32_t *database) 
 		    (*sections)[*nsections].zerofill = (s.flags & SECTION_TYPE)
 			== S_ZEROFILL ? TRUE : FALSE;
 		    if(s.offset > object_size){
-			printf("section contents of: (%.16s,%.16s) is past "
+			usual_printf("section contents of: (%.16s,%.16s) is past "
 			       "end of file\n", s.segname, s.sectname);
 			(*sections)[*nsections].size =  0;
 		    }
 		    else if(s.offset + s.size > object_size){
-			printf("part of section contents of: (%.16s,%.16s) "
+			usual_printf("part of section contents of: (%.16s,%.16s) "
 			       "is past end of file\n",
 			       s.segname, s.sectname);
 			(*sections)[*nsections].size = object_size - s.offset;
@@ -1282,7 +1302,7 @@ uint32_t *database) 
 		    else
 			(*sections)[*nsections].size = s.size;
 		    if(s.reloff >= object_size){
-			printf("relocation entries offset for (%.16s,%.16s)"
+			usual_printf("relocation entries offset for (%.16s,%.16s)"
 			       ": is past end of file\n", s.segname,
 			       s.sectname);
 			(*sections)[*nsections].nrelocs = 0;
@@ -1294,7 +1314,7 @@ uint32_t *database) 
 			if(s.reloff +
 			   s.nreloc * sizeof(struct relocation_info) >
 							    object_size){
-			    printf("relocation entries for section (%.16s,"
+			    usual_printf("relocation entries for section (%.16s,"
 				   "%.16s) extends past end of file\n",
 				   s.segname, s.sectname);
 			    (*sections)[*nsections].nrelocs =
@@ -1343,7 +1363,7 @@ uint32_t *database) 
 		break;
 	    }
 	    if(lcmd.cmdsize == 0){
-		printf("load command %u size zero (can't advance to other "
+		usual_printf("load command %u size zero (can't advance to other "
 		       "load commands)\n", i);
 		break;
 	    }
